import { app, BrowserWindow, ipcMain, safeStorage, Menu, Tray, nativeImage } from 'electron';
import { closeSync, existsSync, openSync, readSync, writeSync } from 'fs';
import fetch from 'node-fetch';
import path from 'path';
import { ANSettings, ANSettingsType } from './settings/settings';
import { Item, TabFetch } from './utils/stash';
import { ItemSearch } from './utils/item_search';
import { clipboard } from 'electron'
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).

declare const SETTINGS_WINDOW_WEBPACK_ENTRY: string;
declare const SETTINGS_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

declare const INVENTORY_VIEW_WINDOW_WEBPACK_ENTRY: string;
declare const INVENTORY_VIEW_WINDOW_PRELOAD_WEBPACK_ENTRY: string

declare const SEARCH_EDIT_WINDOW_WEBPACK_ENTRY: string;
declare const SEARCH_EDIT_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

declare const ITEM_VIEW_WINDOW_WEBPACK_ENTRY: string;
declare const ITEM_VIEW_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const APP_PATH = app.getPath('userData')
const SETTINGS_PATH = APP_PATH + '/settings.json'

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

function exitApp() {
  app.exit()
}

const createSearch = (): void => {
  const inventorysearchWindow = new BrowserWindow({
    height: 600,
    width: 700,
    title: "PoE - Admiral's Nook",
    webPreferences: {
      nodeIntegration: true,
      preload: INVENTORY_VIEW_WINDOW_PRELOAD_WEBPACK_ENTRY
    },
//    frame: false,
//    titleBarStyle: 'hidden',
//    titleBarOverlay: true,
  })
 inventorysearchWindow.loadURL(INVENTORY_VIEW_WINDOW_WEBPACK_ENTRY)
}

const createWindow = () : void => {
const settingsWindow = new BrowserWindow({
    height: 600,
    width: 800,
    show: false,
    title: "PoE - Admiral's Nook Settings",
    webPreferences: {
      preload: SETTINGS_WINDOW_PRELOAD_WEBPACK_ENTRY
    },
//    frame: false,
//    titleBarStyle: 'hidden',
//    titleBarOverlay: true,
  })
settingsWindow.loadURL(SETTINGS_WINDOW_WEBPACK_ENTRY);
settingsWindow.on('close', (event : Electron.Event) => {
  event.preventDefault(),
  settingsWindow.hide();
})
function toggleSettings() {
  if (settingsWindow.isVisible())
  {
    settingsWindow.hide()
  }
  else
  {
    settingsWindow.show()
  }
}
//settingsWindow.webContents.openDevTools();

const searchEditWindow = new BrowserWindow({
  height: 600,
  width: 800,
  show: true,
  title: "PoE - Admiral's Nook Configure",
  webPreferences: {
    preload: SEARCH_EDIT_WINDOW_PRELOAD_WEBPACK_ENTRY
  },
//  frame: false,
//  titleBarStyle: 'hidden',
//  titleBarOverlay: {
//    color: '#2f3241',
//    symbolColor: '#74b1be',
//    height: 60
//  },
  transparent: true,
})
searchEditWindow.on('close', (event : Electron.Event) => {
  event.preventDefault()
  searchEditWindow.hide()
})
searchEditWindow.loadURL(SEARCH_EDIT_WINDOW_WEBPACK_ENTRY);
function toggleEdit() {
  if (searchEditWindow.isVisible())
  {
    searchEditWindow.hide()
  }
  else 
  {
    searchEditWindow.show()
  }
}

createSearch();

//const tray = new Tray('./icons/ChestIcon.png')
const tray = new Tray(nativeImage.createFromPath(path.join(__dirname, 'icons', 'ChestIcon.png')))
const trayMenu = Menu.buildFromTemplate([
  {label: app.getVersion(), type: 'normal'},
  {type: 'separator'},
  {label: "General Settings", type: 'normal', click: toggleSettings},
  {label: "Search Settings", type: 'normal', click: toggleEdit},
  {type: 'separator'},
  {label: "Item Search", type: 'normal', click: createSearch},
  {type: 'separator'},
  {label: "Exit", type: 'normal', click: exitApp}
])
tray.setContextMenu(trayMenu)
tray.setTitle("PoE Admiral's Nook")
tray.setToolTip("Dump Tap Searcher")
}

function getkey() : string {
  var result = ''
  const length = 10
  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  const charactersLength = characters.length;
  let counter = 0;
  while (counter < length) {
    result += characters.charAt(Math.floor(Math.random() * charactersLength));
    counter += 1;
  }
  return result;
}
var all_items = new Map()
function createItemView(key : string) {
  const itemviewWindow = new BrowserWindow({
    height: 450,
    width: 400,
    show: true,
    title: "PoE - Admiral's Nook Item View",
    webPreferences: {
      preload: ITEM_VIEW_WINDOW_PRELOAD_WEBPACK_ENTRY,
      additionalArguments: [key]
    },
  })
  itemviewWindow.loadURL(ITEM_VIEW_WINDOW_WEBPACK_ENTRY);
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    //createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

function load_settings() : ANSettings {
  if (!existsSync(SETTINGS_PATH))
  {
    return new ANSettings()
  }
  const settings_fh = openSync(SETTINGS_PATH, 'r')
  const b = Buffer.alloc(2048)
  const bytes = readSync(settings_fh, b)
  closeSync(settings_fh)
  const settings_str = b.toString('utf8', 0, bytes)
  try
  {
    const settings_obj = JSON.parse(settings_str)
    const settings = new ANSettings().dejson(settings_obj)
    return settings
  }
  catch
  {
    const settings = new ANSettings()
    return settings
  }
}
function save_settings(set : ANSettings) : void {
  const set_str = JSON.stringify(set.rejson(), null, 2)
  const settings_fh = openSync(SETTINGS_PATH, 'w')
  writeSync(settings_fh, set_str)
  closeSync(settings_fh)
}
function get_setting(name : keyof ANSettings, default_value : ANSettingsType) : ANSettingsType {
  var settings = load_settings()
  if (settings.hasOwnProperty(name)) {
    return settings[name] as ANSettingsType
  }
  console.warn('Invalid setting get request [' + name + ']')
  return default_value
}
function set_setting(name : keyof ANSettings, value : ANSettingsType) : void {
  var settings = load_settings()
  settings.set(name, value)
  save_settings(settings)
}

ipcMain.handle("encryptString", (event, args) => {
  return safeStorage.encryptString(args).toString('base64url')
})

ipcMain.handle("getSetting", (event, args) => {
  return get_setting(args[0], args[1])
})
ipcMain.handle("setSetting", (event, args) => {
  return set_setting(args[0], args[1])
})

import base_tab from '../examples/stash_3.json'

function get_url(league : string, account : string, tab : string) {
  return "https://www.pathofexile.com/character-window/get-stash-items?league=" + league + "&tabs=1&tabIndex=" + tab + "&accountName=" + account;
}

async function fetch_tab(league : string, account : string, poesessid : string, tab : string) : Promise<string> {
  const url = get_url(league, account, tab)
//  const req = fetch(
//    url, {
//      method: 'GET',
//      headers: {
//        'accept': '*/*',
//        'sec-fetch-dest': 'document',
//        'User-Agent': '	Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:120.0) Gecko/20100101 Firefox/120.0',
//        'cookie':'POESESSID=' + "6949c99de8b8a47463463ea8cd2f7f60" + '; cf_clearance='+"0XOr3K7WhSzijH5afn5yrkZ9vREuPhMKpraDZV3G2Hc-1701053615-0-1-257cb66.f0f0b365.55569486-160.0.0"
//      }
//    })
//    const reqa = await req
//    const tab_contents = await reqa.text()
    const tab_contents = JSON.stringify(base_tab as object) as string
    return tab_contents
}

ipcMain.handle("tabURL", async (event, args) => {
  const league = get_setting("league", "") as string
  const account = get_setting("account_name", "") as string
  var tab = "0"
  if (typeof args == "number")
  {
    tab = (args as number).toString()
  }
  else
  {
    tab = args as string
  }
  return get_url(league, account, tab)
})

ipcMain.handle("fetchTab", async (event, args) => {
  const league = get_setting("league", "") as string
  const account = get_setting("account_name", "") as string
  const poesessid_e = get_setting("poesessid", "") as string
  const poesessid_d = Buffer.from(poesessid_e, "base64url")
  const poesessid = safeStorage.decryptString(poesessid_d).toString()
  var tab = "0";
  if (typeof args[0] == "number")
  {
    tab = (args[0] as number).toString()
  }
  else
  {
    tab = args[0] as string
  }
  return fetch_tab(league, account, poesessid, tab)
})


import base_search from '../examples/search.json'

ipcMain.handle("fetchSearch", async (event, args) => {
  const filename = get_setting("search_filename", "") as string
  const search_fh = openSync(filename, 'r')
  const b = Buffer.alloc(4096*256)
  const bytes = readSync(search_fh, b)
  closeSync(search_fh)
  const search_str = b.toString('utf8', 0, bytes)
  try {
    const search_obj = JSON.parse(search_str)
    const search = search_obj
    return search
  }
  catch
  {
    return {}
  }
})

ipcMain.handle("saveSearch", async (event, args) => {
  const filename = get_setting("search_filename", "") as string
  const search_str = JSON.stringify(args, null, 2)
  const search_fh = openSync(filename, 'w')
  writeSync(search_fh, search_str)
  closeSync(search_fh)
})

ipcMain.handle('copyBoard', async (event, args) => {
  clipboard.writeText(args as string)
})

ipcMain.handle('pasteBoard', async (event, args) =>{
  const text = clipboard.readText()
  return text
})

ipcMain.handle('showItemWindow', async (event, args) => {
  const key = getkey()
  try {
    all_items.set(key, args as object)
  }
  catch 
  {
    all_items.set(key, new Item().rejson())
  }
  createItemView(key)
})

ipcMain.handle('fetchItem', async (event, args) => {
  try {
    const item = all_items.get(args)
    all_items.delete(args)
    return item
  }
  catch 
  {
    return new Item().rejson()
  }
})